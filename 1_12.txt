1.
import java.util.Scanner;

// 배열의 복사본 작성
class ArraySearchIndex {
//배열 a에서 x와 일치하는 모든 요소의 인덱스를 추출한 배열 반환

	static int[] arraySrchIdx(int[] a, int x) {
		int count = 0;			// x와 일치하는 요소의 개수
		for (int i=0; i<a.length; i++)
			if(a[i] == x) count++;
		
		int[] c = new int[count--];
		for(int i = a.length - 1; count>=0; i--)
			if (a[i] == x)
				c[count--] = i;
		return c;
	}
	
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수 : ");
		int num = stdIn.nextInt();
		
		int[] x = new int[num];		// num 크기의 배열 생성
		
		for (int i=0; i<num; i++) {
			System.out.print("x[" + i + "]:");
			x[i] = stdIn.nextInt();
		}
		
		System.out.print("탐색할 값:");
		int n = stdIn.nextInt();
		int[] b = arraySrchIdx(x, n);
		
		if (b.length == 0)
			System.out.println("일치하는 요소가 없습니다.");
		else {
			System.out.println("일치하는 요소의 인덱스");
			for (int i=0; i<b.length; i++) // 배열 y표시
				System.out.println(b[i]);
		}
	}
}


2.
import java.util.Scanner;

// 배열에서 요소를 삭제한 배열을 반환
class ArrayRemoveOf {
//	배열 a에서 a[idx]를 삭제한 배열을 반환
	static int[] arrayRmvOf(int[] a, int idx) {
		if (idx<0 && idx>=a.length-1)
			return a.clone();		// a의 복사본을 그대로 반환
		else {
			int[] c = new int[a.length - 1];
			int i = 0;
			for (; i<idx; i++)
				c[i] = a[i];
			for (; i<a.length-1; i++)
				c[i] = a[i+1];
			return c;
		}
	}

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수:");
		int num = stdIn.nextInt();
		int[] x =new int[num]; 		// 요소 수가 num인 배열
		
		for (int i=0; i<num; i++) {
			System.out.print("x[" + i + "]:");
			x[i] = stdIn.nextInt();
		}
		
		System.out.print("삭제할 요소의 인덱스:");
		int idx = stdIn.nextInt();
		
		int[] y = arrayRmvOf(x, idx);	// 배열 x에서 x[idx]를 삭제한 배열 생성
		
		for (int i=0; i<y.length; i++) 	// 배열 y 표시
			System.out.println("y[" + i + "] = " + y[i]);
	}
}


3.
import java.util.Scanner;

public class ArrayRemoveOfN {
    //---배열 a의 a[idx]부터 n개의 요소를 삭제한 배열을 반환---//
	static int[] arrayRmvOfN(int[]a, int idx, int n) {
		if(n<0 || idx < 0 || idx > a.length)
			return a.clone();
		else {
			if(idx + n > a.length)
				n= a.length - idx;
			int[] c = new int[a.length - n];
			int i=0;
			for( ; i < idx; i++)
				c[i] = a[i];
			for( ; i < a.length - n; i++)
				c[i] = a[i + n];
			return c;
		}
	}
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		System.out.print("요소 수:");
		int num = stdIn.nextInt();
		int[] x = new int[num];
		
		for(int i =0;i < num; i++) {
			System.out.print("x[" + i + "]:");
			x[i] = stdIn.nextInt();
			
		}
		
		System.out.print("삭제를 시작할 인덱스:");
		int idx = stdIn.nextInt();
		
		System.out.print("삭제할 요소의 개수:");
		int n = stdIn.nextInt();
		
		//배열x의 x[idx]부터 n개의 요소를 삭제한 배열 생성
		int[] y = arrayRmvOfN(x, idx, n);
		
		for(int i=0; i < y.length; i++) //배열 y 표시
			System.out.println("y["+ i + "]=" + y[i]);
		
		

	}

}


4.
import java.util.Scanner;

public class ArrayInsOf {
	//---배열 a의 a[idx]에 x를 삽입한 배열을 반환---//
	
	static int[] ArrayInOf(int[]a, int idx, int x) {
		if(idx < 0 || idx > a.length)
			return a.clone();
		else {
			int[] c = new int[a.length + 1];
			int i=0;
			for( ; i < idx; i++)
				c[i] = a[i];
			for( ; i < a.length; i++)
				c[i + 1] = a[i];
			c[idx] = x;
			return c;

	}
}
	
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수:");
		int num = stdIn.nextInt();
		int[] x = new int[num];            //요소 수가 n인 배열
		
		for(int i =0; i < num; i++) {
			System.out.print("x[" + i + "]:");
			x[i] = stdIn.nextInt();
	}
		
		System.out.print("삽입할 인덱스:");
		int idx = stdIn.nextInt();
		
		System.out.print("삽입할 값:");
		int n = stdIn.nextInt();           //배열 x의 x[idx]에 n을 삽입한 배열 생성
		
                int[] y = ArrayInOf(x, idx, n);
		
		for(int i=0; i < y.length; i++) //배열 y 표시
			System.out.println("y["+ i + "]=" + y[i]);
		
		

	}

}


5.

package G052422;

class AddMatrix {
  static boolean addMatrix(int[][] x, int[][] y, int[][] z) {
	 if (x.length != y.length || y.length != z.length)
		 return false;
	 for (int i = 0; i < x.length; i++)
		 if (x[i].length != y[i].length || y[i].length != z[i].length)
			 return false;
	 for (int i = 0; i < x.length; i++)
		 for (int j = 0; j < x[i].length; j++)
			 z[i][j] = x[i][j] + y[i][j];
	 return true;
  }
  
  static void printMatrix(int[][] m) {
	  for (int i = 0; i < m.length; i++) {
		  for (int j = 0; j < m[i].length; j++)
			  System.out.print(m[i][j] + " ");
			  System.out.println();
		  }
	  }
 
	public static void main(String[] args) {
		int[][] a = { {1, 2, 3}, {4, 5, 6} }; 
		int[][] b = { {6, 3, 4}, {5, 1, 2} }; 
		int[][] c = new int[2][3];
		
		if (addMatrix(a, b, c)) { 
			System.out.println( "행렬a"); printMatrix(a);
			System.out.println( "\n행렬b"); printMatrix(b);
			System.out.println( "\n행렬c"); printMatrix(c);
		}

	}

}


6.

import java.util.Scanner;

class AryClone2 {

  static int[][] aryClone2(int[][] a) {
	int[][] c = new int[a.length][];
	for (int i = 0; i < a.length; i++) {
		c[i] = new int[a[i].length];
		for (int j = 0; j < a[i].length; j++)
			c[i][j] = a[i][j];
	}
	return c;
  }
  
  static void printMatrix(int[][] m) {
	  for (int i =0; i < m.length; i++) {
		  for (int j = 0; j < m[i].length; j++)
			  System.out.print(m[i][j] + " ");
		  System.out.println();
	  }
  }
  
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("행렬의 행 수:"); int height = stdIn.nextInt();
		System.out.print("행렬의 열 수:"); int width = stdIn.nextInt();
		
		int[][] a = new int[height][width];
		for (int i = 0; i < a.length; i++) {
			for (int j = 0; j < a[i].length; j++) {
				System.out.printf("a[%d][%d]:", i, j);
				a[i][j] = stdIn.nextInt();
			}
		}
		
		int[][] ca = aryClone2(a);
		System.out.println("행렬a");
		printMatrix(a);
		
		System.out.println("행렬a의 복사본");
		printMatrix(ca);

	}

}


7.

import java.util.Scanner;

class Min {
	static int min(int a, int b) {
		return a<b ? a:b;
	}
	static int min(int a, int b, int c) {
		int min = a;
		if (b<min) min =b;
		if (c<min) min =c;
		return min;
	}
	static int min(int[] a) {
		int min =a[0];
		for (int i=1; i<a.length; i++)
		if (a[i]<min)
		min = a[i];
		return min;
	}
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		System.out.print("x값 :"); int x= stdIn.nextInt();
		System.out.print("y값 :"); int y= stdIn.nextInt();
		System.out.print("z값 :"); int z= stdIn.nextInt();
		System.out.print("배열 a의 요소 수:");
		int num = stdIn.nextInt();
		int[] a=new int[num];
		for (int i=0; i<num; i++) {
			System.out.print("a["+i+"]:");
			a[i] = stdIn.nextInt();
		}
		System.out.println("x,y의 최솟값은 "+min(x,y)+"입니다.");
		System.out.println("x,y,z의 최솟값은 "+min(x,y,z)+"입니다.");
		System.out.println("배열 a의 최솟값은 "+min(a)+"입니다.");
	}
}


8.

import java.util.Scanner;

class Absolute {
	static int absolute(int x) {
		return x >= 0? x:-x;
	}
	static long absolute(long x) {
		return x >= 0? x:-x;
	}
	static float absolute(float x) {
		return x >= 0? x:-x;
	}
	static double absolute(double x) {
		return x >= 0? x:-x;
	}

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		System.out.print("int   형 정수 a의 값:"); int     a = stdIn.nextInt();
		System.out.print("long  형 정수 b의 값:"); long    b = stdIn.nextInt();
		System.out.print("float 형 정수 c의 값:"); float   c = stdIn.nextInt();
		System.out.print("double형 정수 d의 값:"); double  d = stdIn.nextInt();
		System.out.println("a의 절댓값은 "+ absolute(a) + "입니다.");
		System.out.println("b의 절댓값은 "+ absolute(b) + "입니다.");
		System.out.println("c의 절댓값은 "+ absolute(c) + "입니다.");
		System.out.println("d의 절댓값은 "+ absolute(d) + "입니다.");
	}
}



9.
import java.util.Scanner;

class PrintBits {
	//--- byte형의 비트 구성 표시 ---//
	static void printBits(byte x) {
		for(int i=7; i>=0; i--)
			System.out.print(((x>>>i&1)==1)?'1' : '0');
	}
		
	//--- short형의 비트 구성 표시 ---//
	static void printBits(short x) {
		for(int i=15; i>=0; i--)
			System.out.print(((x>>>i&1)==1)?'1' : '0');
	}
	//--- int형의 비트 구성 표시 ---//
	static void printBits(int x) {
		for(int i=31; i>=0; i--)
			System.out.print(((x>>>i&1)==1)?'1' : '0');
	}	
	
	//--- long형의 비트 구성 표시 ---//
	static void printBits(long x) {
		for(int i=63; i>=0; i--)
			System.out.print(((x>>>i&1)==1)?'1' : '0');
	}
	
	public static void main(String[] args) {	
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("byte 형 정수 a의 값: "); byte a = stdIn.nextByte();
		System.out.print("short형 정수 a의 값: "); short b = stdIn.nextShort();
		System.out.print("int  형 정수 a의 값: ");  int  c = stdIn.nextInt();
		System.out.print("long 형 정수 a의 값: "); long d = stdIn.nextLong();
		
		System.out.print("a의 비트: "); printBits(a);
		System.out.print("\nb의 비트: "); printBits(b);
		System.out.print("\nc의 비트: "); printBits(c);
		System.out.print("\nd의 비트: "); printBits(d);
		System.out.println();
	}

}


10.
import java.util.Scanner;

class PrintArray {
	//--- 1차원 배열 a의 모든 요소 표시 ---//
	static void printArray(int[] a) {
		for(int i=0; i<a.length -1; i++)
			System.out.print(a[i] + " ");
		System.out.print(a[a.length -1]);
		System.out.println();
	}
	
	//--- 2차원 배열 a의 모든 요소 표시 ---//
	static void printArray(int[][] a) {
		int[][] width = new int[a.length][];
		int max = 0;
		for(int i=0; i<a.length; i++) {
			width[i] = new int[a[i].length];
			if (a[i].length>max)
				max = a[i].length;
		}
		
		int[] maxWidth = new int[max];
		for(int i=0; i<a.length; i++) {
			for(int j=0; j<a[i].length; j++) {
			int value = a[i][j];
			width[i][j] = (value<0) ? 1 : 0;
			
			do {
				width[i][j]++;
				value /= 10; } while (value != 0);
			if(width[i][j] > maxWidth[j])
				maxWidth[j] = width[i][j];
			}
		}
		
		for(int i=0; i<a.length; i++) {
			for(int j=0; j<a[i].length - 1; j++) {
				System.out.print(a[i][j]);
				for(int k=0; k<=maxWidth[j] - width[i][j]; k++)
					System.out.print(' ');
			}
			System.out.println(a[i][a[i].length - 1]);
		  }
		
		}
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("1차원 행렬 x의 요소 수:");
		int num = stdIn.nextInt();
		int[] x = new int[num]; 	// 1차원 배열
		
		for(int i=0; i<num; i++) {
			System.out.print("x[" + i + "]:");
			x[i] = stdIn.nextInt();
		}
		
		System.out.print("2차원 배열 y의 행 수:");
		int height = stdIn.nextInt();
		int[][] y = new int[height][];	//2차원 배열
		for(int i=0; i<y.length; i++) {
			System.out.print(i + "행째 열 수:");
			int width = stdIn.nextInt();
			y[i] = new int[width];
		}
		
		System.out.println("각 요소의 값을 입력하자.");
		for(int i=0; i<y.length; i++) {
			for(int j=0; j<y[i].length; j++) {
				System.out.printf("y[%d][%d]:", i, j);
				y[i][j] = stdIn.nextInt();
			}
		}
		System.out.println("\n1차원 배열 x");
		printArray(x);
		
		System.out.println("\n2차원 배열 y");
		printArray(y);
	}

}
