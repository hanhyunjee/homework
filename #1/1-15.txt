
1.

public class Id {
	static int counter = 0;	// 몇 번까지 식별 부여를 부여했는가
	private int id;			// 식별 번호

	//	생성자
	public Id() {
		id = ++counter;		// 식별 번호
}

	// 식별 번호 가져오기
	public int getId() {
		return id;
	}
}

public class IdTester {
	public static void main(String[] args) {
		Id a = new Id();		// 식별 번호 1번
		Id b = new Id();		// 식별 번호 2번
		
		System.out.println("a의 식별번호:" + a.getId());
		System.out.println("b의 식별번호:" + b.getId());

		System.out.println("Id.couter = " + Id.counter);
		System.out.println("a.couter = " + a.counter);
		System.out.println("b.couter = " + b.counter);
	}
}

2.

public class Id {
	private static int counter = 0;	// 몇 번까지 식별 부여를 부여했는가
	private int id;			// 식별 번호

	//	생성자
	public Id() {
		id = ++counter;		// 식별 번호
	}

	// 식별 번호 가져오기
	public int getId() { return id;	}
	
	// 마지막에 부여한 식별 번호 가져오기
	public static int getMaxId() {
		return counter;
	}
}

public class IdTester {
	public static void main(String[] args) {
		Id a = new Id();		// 식별 번호 1번
		Id b = new Id();		// 식별 번호 2번
		
		System.out.println("a의 식별번호:" + a.getId());
		System.out.println("b의 식별번호:" + b.getId());

		System.out.println("Id.couter = " + Id.counter);
		System.out.println("a.couter = " + a.counter);
		System.out.println("b.couter = " + b.counter);
	}
}

3.

public class ExId {
	static int counter = 0;             //몇 번까지 식별 부여를 부여했는가
	private static int step=1;          //증가치
	private int id;                     //식별 번호
	
	//---생성자 ---//
	public ExId() {id = counter += step;}           //식별 번호
	
	
	//---식별 번호 가져오기---//
	public int getId() {return id;}
	
	
	//---증가치 가져오기---//
	public static int getStep() {return step;}
	
	
	//---증가치 설정---//
	public static int setStep(int s) {
		step = (s >= 1) ? s: 1;return step;}
	
	
	//---마지막에 부여한 식별 번호 가져오기---//
	public static int getMaxId() {return counter;}	
}

3-1.

public class ExIdTester{
	 public static void main(String[] args) {
		 ExId a = new ExId();         //식별 번호 1번
		 ExId b = new ExId();         //식별 번호 2번
		 ExId c = new ExId();         //식별 번호 3번
		 ExId.setStep(4);
		 ExId d = new ExId();         //식별 번호  7번
		 ExId e = new ExId();         //식별 번호 11번
		 ExId f = new ExId();         //식별 번호 15번
		 
		 System.out.println("a의 식별 번호:" + a.getId());
		 System.out.println("b의 식별 번호:" + b.getId());
		 System.out.println("c의 식별 번호:" + c.getId());
		 System.out.println("d의 식별 번호:" + d.getId());
		 System.out.println("e의 식별 번호:" + e.getId());
		 System.out.println("f의 식별 번호:" + f.getId());
		 
		 int max = ExId.getMaxId();
		 System.out.println("마지막에 부여한 식별 번호 = " + max);
		 System.out.println("다음에 부여할 식별 번호 = " + (max + ExId.getStep()));
	 }
}

4.

// 각 정수형이 표현할 수 있는 수치 범위를 표시
public class IntegerLimits {

	public static void main(String[] args) {
		System.out.println("정수형의 표현 범위");
		System.out.println("byte 형:" + Byte.MIN_VALUE + " ~ " + Byte.MAX_VALUE);
		System.out.println("short 형:" +Short.MIN_VALUE + " ~ " + Short.MAX_VALUE);
		System.out.println("int 형:" + Integer.MIN_VALUE + " ~ " + Integer.MAX_VALUE);
		System.out.println("long 형:" + Long.MIN_VALUE + " ~ " + Long.MAX_VALUE);

	}

}

5.

// 절댓값, 제곱근을 구해 원의 면적을 구하기
import java.util.Scanner;

class MathMethods {

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
				
		System.out.print("실수값:");
		double x = stdIn.nextDouble();

		System.out.println("절댓값:" + Math.abs(x));
		System.out.println("제곱근:" + Math.sqrt(x));
		System.out.println("면 적:" + Math.PI * x * x);
	}
}

6_1

public class MinMax {
  //---a, b의 최솟값 반환 ---//
	public static int min(int a, int b) {
		return a < b ? a : b;
	}
	
	//---a,b,c의 최솟값 반환 ---//
	public static int min(int a, int b, int c) {
		int min = a;
		if (b < min) min = b;
		if (c < min) min = c;
		return min;
	}
	
	//---배열 a의 최솟값 반환 ---//
	public static int min(int[] a) {
		int min = a[0];
		for (int i = 1; i < a.length; i++)
			if (a[i] < min)
				min = a[i];
		return min;
	}
	//---배열 a의 최솟값을 가지는 모든 요소의 인덱스를 저장한 배열 반환 ---//
	public static int[] minIndexArray(int[] a) {
		int min = min(a);	//최솟값
		int count = 0;		//최솟값을 가지는 요소의 개수
		for (int i = 0; i < a.length; i++)
			if (a[i] == min)
				count++;
				
		int[] c = new int[count--];
		for (int i = 0; i < a.length; i++)
			if (a[i] == min)
				c[count--] = i;
		return c;
	}
	//---a, b의 최댓값을 반환 ---//
	public static int max(int a, int b) {
		return a > b ? a : b;
	}
	//---a, b, c의 최댓값 반환 ---//
	public static int max(int a, int b, int c) {
		int max = a;
		if (b > max) max = b;
		if (c > max) max = c;
		return max;
	}
	
	//---배열 a의 최댓값 반환 ---//
	public static int max(int[] a) {
		int max = a[0];
		for (int i = 1; i < a.length; i++)
			if (a[i] > max)
				max = a[i];
		return max;
	}
	//--- 배열 a의 최댓값을 가지는 모든 요소의 인덱스를 배열로 반환 ---//
	public static int[] maxIndexArray(int[] a) {
		int max = max(a);	//최댓값
		int count = 0; 		//최댓값을 가지는 요소의 개수
		for (int i =0; i < a.length; i++)
			if (a[i] == max)
				count++;
		int[] c = new int[count--];
		for (int i = a.length - 1; count >= 0; i--)
			if (a[i] == max)
				c[count--] = i;
		return c;
	}
}

6_2 

import java.util.Scanner;

public class MinMaxTester {

   public static void main(String[] args) {
      Scanner stdIn = new Scanner(System.in);
      System.out.print("x값 : "); int x = stdIn.nextInt();
      System.out.print("y값 : "); int y = stdIn.nextInt();
      System.out.print("z값 : "); int z = stdIn.nextInt();
      System.out.print("배열a의 요소 수 : ");
      int num = stdIn.nextInt();
      int a [] = new int[num];
      for(int i = 0; i < num; i++) {
         System.out.println("a[" + i + "]:");
         a[i] = stdIn.nextInt();
      }
      
      System.out.printf("x, y의 최솟값은 %d입니다.\n", MinMax.min(x, y));
      System.out.printf("x, y의 최댓값은 %d입니다.\n", MinMax.max(x, y));
      System.out.printf("x, y, z의 최솟값은 %d입니다.\n", MinMax.min(x, y, z));
      System.out.printf("x, y, z의 최댓값은 %d입니다.\n", MinMax.max(x, y, z));
      System.out.printf("배열 a의 최솟값은 %d입니다.\n", MinMax.min(a));
      
      int xmin [] = MinMax.minIndexArray(a);
      System.out.print("인덱스는{ ");
      for(int i = 0; i < xmin.length; i++)
         System.out.print(xmin[i] + " "); System.out.println("}입니다.");
      System.out.printf("배열 a의 최댓값은 %d입니다.\n", MinMax.max(a));
      int xmax[] = MinMax.maxIndexArray(a);
      System.out.print("인덱스는{ ");
      for(int i = 0; i < xmax.length; i++)
         System.out.print(xmax[i] + " "); 
      System.out.println("}입니다.");
   }
}

7.

import java.util.GregorianCalendar;
import static java.util.GregorianCalendar.*;

public class Day {
  private int year = 1;
  private int month = 1;
  private int date = 1;

  private static int[][] mdays = {
    {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},  //평년
    {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},  //윤년
  };	
  public static boolean isLeap(int y) {
    return y % 4 == 0 && y % 100 !=0 || y % 400 == 0;
  }	
  public static int dayOfMonth(int y, int m) {
    return mdays[isLeap(y) ? 1:0][m-1];
  }	
  private static int adjustedMonth(int m) {
    return m <1 ?1:m> 12?12:m;
  }
  private static int adjustedDay(int y, int m, int d) {
    if (d<1)
      return 1;
    int dMax = dayOfMonth(y,m);
    return d > dMax ? dMax :d;
  }
  public Day() {
    GregorianCalendar today = new GregorianCalendar();
    this.year = today.get(year);
    this.year = today.get(month);
    this.date = today.get(date);
  }
  public Day(int year) {
    this.year = year;
  }
  public Day(int year, int month) {
    this(year);
    this.month = adjustedMonth(month);
  }
  public Day(int year, int month, int date) {
    this(year, month);
    this.date = adjustedDay(year, month, date);
  }
  public Day(Day d) {
    this(d.year, d.month, d.date);
  }
  public int getYear() {
    return year;
  }
  public int getMonth() {
    return month;
  }
  public int getDate() {
    return date;
  }
  public void setYear(int year) {
    this.year = year;
    this.date = adjustedDay(year, month, date);
  }
  public void setMonth(int month) {
    this.month = adjustedMonth(month);
    this.date = adjustedDay(year, month, date);
  }
  public void setDate(int date) {
    this.date = adjustedDay(year, month, date);
  }
  public void set(int year, int month, int date) {
    this.year = year;
    this.month = adjustedMonth(month);
    this.date = adjustedDay(year, month, date);
  }
  public boolean isLeap() {
    return isLeap(year);
  }
  public int dayOfWeek() {
    int y = year;
    int m = month;
    if (m == 1 || m == 2) {
      y--;
      m += 12;
    }
    return (y+y / 4-y / 100+y / 400+(13*m+8) / 5+date) %7;
  }
  public boolean equalTo(Day d) {
    return year == d.year && month == d.month && date == d.date;
  }
  public String toString() {
    String[]wd = {"일","월","화","수","목","금","토"};
    return String.format("%04d년%02d월%02d일(%s)",year,month,date,wd[dayOfWeek()]);
  }
  public int dayOfYear() {
    int days = date;
    for (int i=1; i<month; i++)
    days += dayOfMonth(year, i);
    return days;
  }
  public int leftDayOfYear() {
    return 365 + (isLeap(year)?1:0) - dayOfYear();
  }
  public int compareTo(Day d) {
    return compare (this, d);
  }
  public static int compare(Day d1, Day d2) {
    if (d1.year > d2.year) return 1;
    if (d1.year > d2.year) return -1;
    if (d1.month < d2.month) return 1;
    if (d1.month < d2.month) return -1;
		
    return d1.date > d2.date ? 1: d1.date < d2.date ? -1:0;
  }
  public void succeed() {
    if (date < dayOfMonth(year, month))
    date++;
    else {
      if (++month > 12) {
        year++;
        month = 1;
      }
      date =1;
    }
  }
  public Day succeedingDay() {
    Day temp = new Day(this);
    temp.succeed();
    return temp;
  }
  public void precede() {
    if (date > 1)
      date--;
    else {
      if(--month < 1) {
        year--;
        month = 12;
      }
      date = dayOfMonth(year, month);
    }
  }
  public Day precedingDay() {
    Day temp = new Day(this);
    temp.precede();
    return temp;
  }
  public void succeedDays(int n) {
    if (n < 0)
        precedeDays(-n);
    else if(n > 0) {
        date += n;
        while (date > dayOfMonth(year, month)) {
          date -= dayOfMonth(year, month);
          if(++month > 12) {
            year++;
            month = 1;
          }
        }
      }
    }
  public Day after(int n) {
    Day temp = new Day(this);
    temp.succeedDays(n);
    return temp;
  }
  public void precedeDays(int n) {
    if(n < 0)
      succeedDays(-n);
    else if (n >0) {
      date -= n;
      while(date < 1) {
        year--;
        month = 12;
      }
      date += dayOfMonth(year, month);
    }
  
  public Day before(int n) {
    Day temp = new Day(this);
    temp.precedeDays(n);
    return temp;
  }
}


9_4.

public class Day {
  private int year = 1;	//년
  private int month = 1;//월
  private int date = 1; //일
  
  //---생성자 ---//
  public Day()									{ }
  public Day(int year)							{ this.year = year; }
  public Day(int year, int month)				{ this(year); this.month = month; }
  public Day(int year, int month, int date)		{ this(year, month); this.date = date; }
  public Day(Day d)								{ this(d.year, d.month, d.date); }
	
  //---년,월,일 불러오기---//
  public int getYear() { return year; }		//년 불러오기
  public int getMonth() { return month; }	//월 불러오기
  public int getDate() { return date; }		//일 불러오기
  
  
  //---년,월,일 설정---//
  public void setYear(int year) { this.year = year; }
  public void setMonth(int month) { this.month = month; }
  public void setDate(int date) { this.date = date; }

  public void set(int year, int month, int date) { 		//년,월,일 설정
	  this.year = year;		//년
	  this.month = month;	//월
	  this.date = date;		//일
  }
  
  //---요일 찾기---//
  public int dayOfWeek() {
	  int y = year;
	  int m = month;
	  if (m == 1 || m == 2) {
		  y--;
		  m+= 12;
	  }
	  return (y+y / 4-y / 100+y/ 400+(13*m+8) / 5+date) % 7;
  }
  
  //---날짜 d와 같은가?---//
  public boolean equalTo(Day d) {
	  return year == d.year && month == d.month && date == d.date;
  }
  
  //---문자열 표현 반환---//
  public String toString() {
	  String[] wd = {"일", "월", "화", "수", "목", "금", "토"};
	  return String.format("%04d년 %02d월 %02d일(%s)", year, month, date, wd[dayOfWeek()]);
	}
}
