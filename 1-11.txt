1.

import java.util.Scanner;

// 임의의 비트를 조작
class SetBit {
//	int형 비트 구성
	static void printBits(int x) {
		for (int i=31; i>=0; i--)
			System.out.print(((x>>>i & 1) == 1) ? '1' : '0');
	}
	
//	x의 pos 위치에 있는 비트를 1로 변경한 값을 반환
	static int set(int x, int pos) {
		return x | (1 << pos);
	}
	
//	x의 pos 위치에 있는 비트를 0으로 변경한 값을 반환
	static int reset(int x, int pos) {
		return x & ~(1 << pos);
	}
	
//	x의 pos 위치에 있는 비트를 반전시킨 값을 반환
	static int inverse(int x, int pos) {
		return x ^ (1 << pos);
	}

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.println("정수x의 pos번째 비트를 변경합니다.");
		System.out.print("x:"); int x = stdIn.nextInt();
		System.out.print("pos:"); int pos = stdIn.nextInt();
		
		System.out.print("x                    = "); printBits(x);
		System.out.print("\nset(x, pos)        = "); printBits(set(x, pos));
		System.out.print("\nreset(x, pos)      = "); printBits(reset(x, pos));
		System.out.print("\ninverse(x, pos)    = "); printBits(inverse(x, pos));
		System.out.println();
	}
}
2.

import java.util.Scanner;

// 임의의 연속되는 비트를 변경
class SetBits {
//	int형 비트 구성
	static void printBits(int x) {
		for (int i=31; i>=0; i--)
			System.out.print(((x>>>i & 1) == 1) ? '1' : '0');
	}
	
//	x의 pos 위치에 있는 비트부터 n개 비트를 1로 변경한 값을 반환
	static int setN(int x, int pos, int n) {
		return x | (~(~0 <<n) << pos);
	}
	
//	x의 pos 위치에 있는 비트부터 n개 비트를 0으로 변경한 값을 반환
	static int resetN(int x, int pos, int n) {
		return x & ~(~(~0 <<n) << pos);
	}
	
//	x의 pos 위치에 있는 비트부터 n개 비트를 반전시킨 값을 반환
	static int inverseN(int x, int pos, int n) {
		return x ^ (~(~0 <<n) << pos);
	}

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.println("정수x의 pos번째 비트부터 n개 비트를 변경합니다.");
		System.out.print("x  :"); int x = stdIn.nextInt();
		System.out.print("pos:"); int pos = stdIn.nextInt();
		System.out.print("n  :"); int n = stdIn.nextInt();
		
		System.out.print("x                      = "); printBits(x);
		System.out.print("\nsetN(x, pos, n)        = "); printBits(setN(x, pos, n));
		System.out.print("\nresetN(x, pos, n)      = "); printBits(resetN(x, pos, n));
		System.out.print("\ninverseN(x, pos, n)    = "); printBits(inverseN(x, pos, n));
		System.out.println();
	}
}


3-1.

import java.awt.Taskbar.State;
import java.nio.file.spi.FileSystemProvider;
import java.util.Scanner;

class SumOf1 {
//---배열 a의 모든 요소의 합을 구한다.---//
	
	static int sumOf(int[]a) {
		int sum =0;
		for(int i =0; i < a.length; i++)
			sum += a[i];
		return sum;
	}
		
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.println("요소 수:");
		int num = stdIn.nextInt();
		int[] x = new int[num];  //num개의 요소를 가지는 배열
			
		for (int i =0; i < num; i++) {
			System.out.print("x[" + i + "]:");
			x[i] = stdIn.nextInt();
		}			
		System.out.println("모든 요소의 합은 " + sumOf(x) + "입니다.");
	}
}


3-2.

import java.util.Scanner;

class SumOf2{

static int sumOf(int[]a) {
	
	int sum = 0;
	// 확장 for문
	for(int i : a)
		sum += i;
	return sum;

}


public static void main(String[] args) {
	Scanner stdIn = new Scanner(System.in);
	
	System.out.println("요소 수:");
	int num = stdIn.nextInt();
	int[] x = new int[num];  //num개의 요소를 가지는 배열
	
	for (int i =0; i < num; i++) {
		System.out.print("x[" + i + "]:");
		x[i] = stdIn.nextInt();
	}
	
	System.out.println("모든 요소의 합은 " + sumOf(x) + "입니다.");
   }
}



4.

import java.util.Scanner;

public class minOfHeightWeight {
    //---배열 a의 최솟값을 구해서 반환---//
	
	static int minOf(int[]a) {
		int min = a[0];
		for(int i =1; i < a.length; i++)
			if(a[i]<min)
				min =a[i];
		return min;
	}
		
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
			
		System.out.print("사람 수는:");
		int num = stdIn.nextInt();       //사람 수를 읽는다
			
		int[] height = new int[num];     //신장용 배열 생성
		int[] weight = new int[num];     //체중용 배열 생성
			
		System.out.println(num + "명의 신장과 체중을 입력하자.");
		for (int i = 0; i < num; i++) {
			System.out.println((i+1)+ "번의 신장 :");
			height[i] = stdIn.nextInt();
			System.out.println((i+1)+ "번의 체중 :");
			weight[i] = stdIn.nextInt();
		}
			
		System.out.println("가장 키가 작은 사람의 신장:" + minOf(height)+ "cm");
		System.out.println("가장 마른 사람의 체중:" + minOf(weight)+ "kg");
	}
}


5. 

import java.util.Scanner;

class LinearSearch {
	//---배열 a의 요소로부터 key와 일치하는 
	가장 앞에 있는 요소를 선형 탐색 ---//
	
static int linearSearch(int[] a, int key) {
	for (int i = 0; i <a.length; i++)
		if (a[i] == key)
		return i;
	   return -1;
		}		
//---배열 a의 요소로부터 key와 일치하는 가장 뒤에 있는 요소를 선형 탐색 ---//
	
static int linearSearchR(int[] a, int key) {
	for (int i = a.length - 1; i >= 0; i--)
		if (a[i] == key)
			return i;
	    	return -1;
		}		
public static void main(String[] args) {
	Scanner stdIn = new Scanner(System.in);
	System.out.print("요소 수:");
	int num = stdIn.nextInt();
	int[] x = new int[num];
	for (int i = 0; i < num; i++) {
		System.out.print("x[" + i + "]:");
		x[i] = stdIn.nextInt();
	}
			
		System.out.print("찾는 값:");  
		int ky = stdIn.nextInt();
			
		int idxTop = linearSearch(x, ky);
		int idxBtm = linearSearchR(x, ky);
			
		if (idxTop == -1)
			System.out.println("해당 값은 존재하지 않습니다.");
		else if (idxTop == idxBtm)
			System.out.println("해당 값은 x[" + idxTop + "]에 있습니다.");
		else {
			System.out.println("해당 값의 요소가 여러 개 존재합니다.");
			System.out.println("가장 앞에 위치한 값은 x[" + idxTop + "]에 있습니다.");
			System.out.println("가장 뒤에 위치한 값은 x[" + idxBtm + "]에 있습니다.");
		}
	}
}


6.

import java.util.Scanner;

class AryRmv {
	//---배열 a에서 a[idx]를 삭제(뒤에 있는 요소들을 하나씩 앞으로 이동 ---//
	static void aryRmv(int[] a, int idx) {
		if (idx >= 0 && idx < a.length ) {
			for (int i = idx; i < a.length - 1; i++)
				a[i] = a[i + 1];
		}
	}
	
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수:");
		int num = stdIn.nextInt();
		int[] a = new int[num];
		
		for (int i = 0; i < num; i++) {
			System.out.print("a[" + i + "]:");
			a[i] = stdIn.nextInt();
		}
		
		System.out.print("삭제할 요소의 인덱스:");
		int idx = stdIn.nextInt();
		
		aryRmv(a, idx);
		for (int i = 0; i < num; i++)
			System.out.println("a[" + i + "] ="  + a[i]);
	}
}


7.

import java.util.Scanner;

class AryRmvN {
	static void aryRmvN(int[]a,int idx, int n) {
		if (n>0 && idx >=0 && idx+n<a.length) {
			int idx2 = idx + n-1;
			if (idx2 >a.length-n-1)
			idx2 = a.length-n-1;
			for (int i = idx; i <= idx2; i++)
			a[i] = a[i+n];
		}
	}

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수 : ");
		int num = stdIn.nextInt();
		int[]a = new int[num];
		
		for (int i=0; i<num; i++) {
			System.out.print("a["+i+"]:");
			a[i] = stdIn.nextInt();
		}
		System.out.print("삭제를 시작할 인덱스 : ");
		int idx = stdIn.nextInt();
		
		System.out.print("삭제할 요소의 수 : ");
		int n = stdIn.nextInt();
		
		aryRmvN(a,idx,n);
		for (int i=0; i<num; i++)
			System.out.println("a["+i+"]="+a[i]);
	}
}



8.


import java.util.Scanner;

class AryIns {
	static void aryIns(int[]a, int idx, int x) {
		if (idx >=0 && idx <a.length) {
			for (int i=a.length-1; i>idx; i--)
				a[i] = a[i-1];
			a[idx] = x;
		}
	}

	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수 : ");
		int num = stdIn.nextInt();
		int[] a = new int[num];
		
		for (int i=0; i<num; i++) {
			System.out.print("a["+i+"]:");
			a[i] = stdIn.nextInt();
		}
		System.out.print("삽입할 요소의 인덱스:");
		int idx = stdIn.nextInt();
		
		System.out.print("삽입할 값:");
		int n = stdIn.nextInt();
		
		aryIns(a,idx,n);
		for (int i=0; i<num; i++)
			System.out.println("a["+i+"]="+a[i]);
	}
	
}



9.

import java.util.Scanner;

class AryIns {

//---배열a의 a[idx]에 x를 삽입(뒤에 있는 요소를 하나씩 오른쪽으로 이동시킴)---//
	static void aryIns(int[] a, int idx, int x) {
		if(idx>=0 && idx<a.length) {
			for(int i=a.length-1; i>idx; i--)
				a[i] = a[i-1];
			a[idx] = x;
		}
	}
	
	public static void main(String[] args) {
		Scanner stdIn = new Scanner(System.in);
		
		System.out.print("요소 수:");
		int num = stdIn.nextInt();
		int[] a = new int[num];		//num 크기의 배열 생성
		
		for(int i=0; i<num; i++) {
			System.out.print("a[" + i + "]:");
			a[i] = stdIn.nextInt();	
		}
		
		System.out.print("삽입할 요소의 인덱스:");
		int idx = stdIn.nextInt();
		
		System.out.print("삽입할 값:");
		int n = stdIn.nextInt();
		
		aryIns(a, idx, n);		//배열 a에서 a[idx]에 x를 삽입
		
		for (int i=0; i<num; i++)		//배열 a표시
			System.out.println("a[" + i + "] = " + a[i]);
	}

}
